// <auto-generated />
using FilmsAPI.Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmsAPI.Migrations
{
    [DbContext(typeof(MediaContext))]
    [Migration("20231129211542_FavoriteMediaMigration")]
    partial class FavoriteMediaMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("FilmsAPI.Data.Entities.FavoriteMedia", b =>
                {
                    b.Property<int>("FavoriteMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FavoriteMediaId");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoritesMedia");
                });

            modelBuilder.Entity("FilmsAPI.Data.Entities.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MediaId");

                    b.ToTable("Media");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Media");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FilmsAPI.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FilmsAPI.Data.Entities.Movie", b =>
                {
                    b.HasBaseType("FilmsAPI.Data.Entities.Media");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Movie");

                    b.HasData(
                        new
                        {
                            MediaId = 1,
                            Description = "Descripción de la película 1",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 1",
                            Duration = 101
                        },
                        new
                        {
                            MediaId = 2,
                            Description = "Descripción de la película 2",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 2",
                            Duration = 102
                        },
                        new
                        {
                            MediaId = 3,
                            Description = "Descripción de la película 3",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 3",
                            Duration = 103
                        },
                        new
                        {
                            MediaId = 4,
                            Description = "Descripción de la película 4",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 4",
                            Duration = 104
                        },
                        new
                        {
                            MediaId = 5,
                            Description = "Descripción de la película 5",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 5",
                            Duration = 105
                        },
                        new
                        {
                            MediaId = 6,
                            Description = "Descripción de la película 6",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 6",
                            Duration = 106
                        },
                        new
                        {
                            MediaId = 7,
                            Description = "Descripción de la película 7",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 7",
                            Duration = 107
                        },
                        new
                        {
                            MediaId = 8,
                            Description = "Descripción de la película 8",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 8",
                            Duration = 108
                        },
                        new
                        {
                            MediaId = 9,
                            Description = "Descripción de la película 9",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 9",
                            Duration = 109
                        },
                        new
                        {
                            MediaId = 10,
                            Description = "Descripción de la película 10",
                            Genre = "Action",
                            State = true,
                            Title = "Pelicula 10",
                            Duration = 110
                        });
                });

            modelBuilder.Entity("FilmsAPI.Data.Entities.Serie", b =>
                {
                    b.HasBaseType("FilmsAPI.Data.Entities.Media");

                    b.Property<int>("Episodes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Seasons")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Serie");

                    b.HasData(
                        new
                        {
                            MediaId = 11,
                            Description = "Descripción de la serie 1",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 1",
                            Episodes = 4,
                            Seasons = 2
                        },
                        new
                        {
                            MediaId = 12,
                            Description = "Descripción de la serie 2",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 2",
                            Episodes = 5,
                            Seasons = 3
                        },
                        new
                        {
                            MediaId = 13,
                            Description = "Descripción de la serie 3",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 3",
                            Episodes = 6,
                            Seasons = 4
                        },
                        new
                        {
                            MediaId = 14,
                            Description = "Descripción de la serie 4",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 4",
                            Episodes = 7,
                            Seasons = 5
                        },
                        new
                        {
                            MediaId = 15,
                            Description = "Descripción de la serie 5",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 5",
                            Episodes = 8,
                            Seasons = 6
                        },
                        new
                        {
                            MediaId = 16,
                            Description = "Descripción de la serie 6",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 6",
                            Episodes = 9,
                            Seasons = 7
                        },
                        new
                        {
                            MediaId = 17,
                            Description = "Descripción de la serie 7",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 7",
                            Episodes = 10,
                            Seasons = 8
                        },
                        new
                        {
                            MediaId = 18,
                            Description = "Descripción de la serie 8",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 8",
                            Episodes = 11,
                            Seasons = 9
                        },
                        new
                        {
                            MediaId = 19,
                            Description = "Descripción de la serie 9",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 9",
                            Episodes = 12,
                            Seasons = 10
                        },
                        new
                        {
                            MediaId = 20,
                            Description = "Descripción de la serie 10",
                            Genre = "Comedy",
                            State = true,
                            Title = "Serie 10",
                            Episodes = 13,
                            Seasons = 11
                        });
                });

            modelBuilder.Entity("FilmsAPI.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("FilmsAPI.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "fariasfranco@gmail.com",
                            LastName = "Farias",
                            Name = "Franco",
                            Password = "123456",
                            State = true,
                            UserName = "FrancoFarias"
                        },
                        new
                        {
                            Id = 2,
                            Email = "savoyafausto@gmail.com",
                            LastName = "Savoya",
                            Name = "Fausto",
                            Password = "123456",
                            State = true,
                            UserName = "FaustoSav"
                        });
                });

            modelBuilder.Entity("FilmsAPI.Data.Entities.RegularUser", b =>
                {
                    b.HasBaseType("FilmsAPI.Data.Entities.User");

                    b.HasDiscriminator().HasValue("RegularUser");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "regular@gmail.com",
                            LastName = "Garcia",
                            Name = "Pedro",
                            Password = "123456",
                            State = true,
                            UserName = "regular"
                        });
                });

            modelBuilder.Entity("FilmsAPI.Data.Entities.FavoriteMedia", b =>
                {
                    b.HasOne("FilmsAPI.Data.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmsAPI.Data.Entities.User", "User")
                        .WithMany("FavoritesMedia")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmsAPI.Data.Entities.User", b =>
                {
                    b.Navigation("FavoritesMedia");
                });
#pragma warning restore 612, 618
        }
    }
}
